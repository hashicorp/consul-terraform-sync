// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	config "github.com/hashicorp/consul-terraform-sync/config"
	event "github.com/hashicorp/consul-terraform-sync/state/event"

	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// AddTaskEvent provides a mock function with given fields: _a0
func (_m *Store) AddTaskEvent(_a0 event.Event) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddTaskEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(event.Event) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTask provides a mock function with given fields: taskName
func (_m *Store) DeleteTask(taskName string) error {
	ret := _m.Called(taskName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(taskName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTaskEvents provides a mock function with given fields: taskName
func (_m *Store) DeleteTaskEvents(taskName string) error {
	ret := _m.Called(taskName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTaskEvents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(taskName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTasks provides a mock function with no fields
func (_m *Store) GetAllTasks() config.TaskConfigs {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllTasks")
	}

	var r0 config.TaskConfigs
	if rf, ok := ret.Get(0).(func() config.TaskConfigs); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.TaskConfigs)
		}
	}

	return r0
}

// GetConfig provides a mock function with no fields
func (_m *Store) GetConfig() config.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 config.Config
	if rf, ok := ret.Get(0).(func() config.Config); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(config.Config)
	}

	return r0
}

// GetTask provides a mock function with given fields: taskName
func (_m *Store) GetTask(taskName string) (config.TaskConfig, bool) {
	ret := _m.Called(taskName)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 config.TaskConfig
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (config.TaskConfig, bool)); ok {
		return rf(taskName)
	}
	if rf, ok := ret.Get(0).(func(string) config.TaskConfig); ok {
		r0 = rf(taskName)
	} else {
		r0 = ret.Get(0).(config.TaskConfig)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(taskName)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetTaskEvents provides a mock function with given fields: taskName
func (_m *Store) GetTaskEvents(taskName string) map[string][]event.Event {
	ret := _m.Called(taskName)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskEvents")
	}

	var r0 map[string][]event.Event
	if rf, ok := ret.Get(0).(func(string) map[string][]event.Event); ok {
		r0 = rf(taskName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]event.Event)
		}
	}

	return r0
}

// SetTask provides a mock function with given fields: taskConf
func (_m *Store) SetTask(taskConf config.TaskConfig) error {
	ret := _m.Called(taskConf)

	if len(ret) == 0 {
		panic("no return value specified for SetTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(config.TaskConfig) error); ok {
		r0 = rf(taskConf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
