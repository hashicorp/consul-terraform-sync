// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	hcat "github.com/hashicorp/hcat"
	mock "github.com/stretchr/testify/mock"
)

// Template is an autogenerated mock type for the Template type
type Template struct {
	mock.Mock
}

type Template_Expecter struct {
	mock *mock.Mock
}

func (_m *Template) EXPECT() *Template_Expecter {
	return &Template_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *Template) Execute(_a0 hcat.Recaller) ([]byte, error) {
	ret := _m.Called(_a0)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(hcat.Recaller) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(hcat.Recaller) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Template_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type Template_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//  - _a0 hcat.Recaller
func (_e *Template_Expecter) Execute(_a0 interface{}) *Template_Execute_Call {
	return &Template_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *Template_Execute_Call) Run(run func(_a0 hcat.Recaller)) *Template_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(hcat.Recaller))
	})
	return _c
}

func (_c *Template_Execute_Call) Return(_a0 []byte, _a1 error) *Template_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ID provides a mock function with given fields:
func (_m *Template) ID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Template_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type Template_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *Template_Expecter) ID() *Template_ID_Call {
	return &Template_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *Template_ID_Call) Run(run func()) *Template_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Template_ID_Call) Return(_a0 string) *Template_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

// Notify provides a mock function with given fields: _a0
func (_m *Template) Notify(_a0 interface{}) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Template_Notify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Notify'
type Template_Notify_Call struct {
	*mock.Call
}

// Notify is a helper method to define mock.On call
//  - _a0 interface{}
func (_e *Template_Expecter) Notify(_a0 interface{}) *Template_Notify_Call {
	return &Template_Notify_Call{Call: _e.mock.On("Notify", _a0)}
}

func (_c *Template_Notify_Call) Run(run func(_a0 interface{})) *Template_Notify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Template_Notify_Call) Return(_a0 bool) *Template_Notify_Call {
	_c.Call.Return(_a0)
	return _c
}

// Render provides a mock function with given fields: content
func (_m *Template) Render(content []byte) (hcat.RenderResult, error) {
	ret := _m.Called(content)

	var r0 hcat.RenderResult
	if rf, ok := ret.Get(0).(func([]byte) hcat.RenderResult); ok {
		r0 = rf(content)
	} else {
		r0 = ret.Get(0).(hcat.RenderResult)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Template_Render_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Render'
type Template_Render_Call struct {
	*mock.Call
}

// Render is a helper method to define mock.On call
//  - content []byte
func (_e *Template_Expecter) Render(content interface{}) *Template_Render_Call {
	return &Template_Render_Call{Call: _e.mock.On("Render", content)}
}

func (_c *Template_Render_Call) Run(run func(content []byte)) *Template_Render_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Template_Render_Call) Return(_a0 hcat.RenderResult, _a1 error) *Template_Render_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewTemplate interface {
	mock.TestingT
	Cleanup(func())
}

// NewTemplate creates a new instance of Template. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTemplate(t mockConstructorTestingTNewTemplate) *Template {
	mock := &Template{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
