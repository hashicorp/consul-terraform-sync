// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	hcat "github.com/hashicorp/hcat"
	mock "github.com/stretchr/testify/mock"
)

// Template is an autogenerated mock type for the Template type
type Template struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0
func (_m *Template) Execute(_a0 hcat.Recaller) ([]byte, error) {
	ret := _m.Called(_a0)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(hcat.Recaller) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(hcat.Recaller) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ID provides a mock function with given fields:
func (_m *Template) ID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Notify provides a mock function with given fields: _a0
func (_m *Template) Notify(_a0 interface{}) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Render provides a mock function with given fields: content
func (_m *Template) Render(content []byte) (hcat.RenderResult, error) {
	ret := _m.Called(content)

	var r0 hcat.RenderResult
	if rf, ok := ret.Get(0).(func([]byte) hcat.RenderResult); ok {
		r0 = rf(content)
	} else {
		r0 = ret.Get(0).(hcat.RenderResult)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
