// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// Interceptor is an autogenerated mock type for the Interceptor type
type Interceptor struct {
	mock.Mock
}

type Interceptor_Expecter struct {
	mock *mock.Mock
}

func (_m *Interceptor) EXPECT() *Interceptor_Expecter {
	return &Interceptor_Expecter{mock: &_m.Mock}
}

// Intercept provides a mock function with given fields: _a0, _a1
func (_m *Interceptor) Intercept(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// Interceptor_Intercept_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Intercept'
type Interceptor_Intercept_Call struct {
	*mock.Call
}

// Intercept is a helper method to define mock.On call
//   - _a0 http.ResponseWriter
//   - _a1 *http.Request
func (_e *Interceptor_Expecter) Intercept(_a0 interface{}, _a1 interface{}) *Interceptor_Intercept_Call {
	return &Interceptor_Intercept_Call{Call: _e.mock.On("Intercept", _a0, _a1)}
}

func (_c *Interceptor_Intercept_Call) Run(run func(_a0 http.ResponseWriter, _a1 *http.Request)) *Interceptor_Intercept_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *Interceptor_Intercept_Call) Return() *Interceptor_Intercept_Call {
	_c.Call.Return()
	return _c
}

func (_c *Interceptor_Intercept_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *Interceptor_Intercept_Call {
	_c.Run(run)
	return _c
}

// ShouldIntercept provides a mock function with given fields: _a0
func (_m *Interceptor) ShouldIntercept(_a0 *http.Request) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ShouldIntercept")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*http.Request) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Interceptor_ShouldIntercept_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShouldIntercept'
type Interceptor_ShouldIntercept_Call struct {
	*mock.Call
}

// ShouldIntercept is a helper method to define mock.On call
//   - _a0 *http.Request
func (_e *Interceptor_Expecter) ShouldIntercept(_a0 interface{}) *Interceptor_ShouldIntercept_Call {
	return &Interceptor_ShouldIntercept_Call{Call: _e.mock.On("ShouldIntercept", _a0)}
}

func (_c *Interceptor_ShouldIntercept_Call) Run(run func(_a0 *http.Request)) *Interceptor_ShouldIntercept_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Interceptor_ShouldIntercept_Call) Return(_a0 bool) *Interceptor_ShouldIntercept_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Interceptor_ShouldIntercept_Call) RunAndReturn(run func(*http.Request) bool) *Interceptor_ShouldIntercept_Call {
	_c.Call.Return(run)
	return _c
}

// NewInterceptor creates a new instance of Interceptor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterceptor(t interface {
	mock.TestingT
	Cleanup(func())
}) *Interceptor {
	mock := &Interceptor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
