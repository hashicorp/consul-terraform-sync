// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	oapigen "github.com/hashicorp/consul-terraform-sync/api/oapigen"
)

// ClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type ClientWithResponsesInterface struct {
	mock.Mock
}

// CreateTaskWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateTaskWithBodyWithResponse(ctx context.Context, params *oapigen.CreateTaskParams, contentType string, body io.Reader, reqEditors ...oapigen.RequestEditorFn) (*oapigen.CreateTaskResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapigen.CreateTaskResponse
	if rf, ok := ret.Get(0).(func(context.Context, *oapigen.CreateTaskParams, string, io.Reader, ...oapigen.RequestEditorFn) *oapigen.CreateTaskResponse); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapigen.CreateTaskResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *oapigen.CreateTaskParams, string, io.Reader, ...oapigen.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTaskWithResponse provides a mock function with given fields: ctx, params, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateTaskWithResponse(ctx context.Context, params *oapigen.CreateTaskParams, body oapigen.TaskRequest, reqEditors ...oapigen.RequestEditorFn) (*oapigen.CreateTaskResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapigen.CreateTaskResponse
	if rf, ok := ret.Get(0).(func(context.Context, *oapigen.CreateTaskParams, oapigen.TaskRequest, ...oapigen.RequestEditorFn) *oapigen.CreateTaskResponse); ok {
		r0 = rf(ctx, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapigen.CreateTaskResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *oapigen.CreateTaskParams, oapigen.TaskRequest, ...oapigen.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTaskByNameWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *ClientWithResponsesInterface) DeleteTaskByNameWithResponse(ctx context.Context, name string, reqEditors ...oapigen.RequestEditorFn) (*oapigen.DeleteTaskByNameResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapigen.DeleteTaskByNameResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapigen.RequestEditorFn) *oapigen.DeleteTaskByNameResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapigen.DeleteTaskByNameResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapigen.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTasksWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) GetAllTasksWithResponse(ctx context.Context, reqEditors ...oapigen.RequestEditorFn) (*oapigen.GetAllTasksResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapigen.GetAllTasksResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapigen.RequestEditorFn) *oapigen.GetAllTasksResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapigen.GetAllTasksResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapigen.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHealthWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) GetHealthWithResponse(ctx context.Context, reqEditors ...oapigen.RequestEditorFn) (*oapigen.GetHealthResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapigen.GetHealthResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapigen.RequestEditorFn) *oapigen.GetHealthResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapigen.GetHealthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapigen.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskByNameWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *ClientWithResponsesInterface) GetTaskByNameWithResponse(ctx context.Context, name string, reqEditors ...oapigen.RequestEditorFn) (*oapigen.GetTaskByNameResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapigen.GetTaskByNameResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapigen.RequestEditorFn) *oapigen.GetTaskByNameResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapigen.GetTaskByNameResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapigen.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClientWithResponsesInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewClientWithResponsesInterface creates a new instance of ClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientWithResponsesInterface(t mockConstructorTestingTNewClientWithResponsesInterface) *ClientWithResponsesInterface {
	mock := &ClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
