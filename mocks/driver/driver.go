// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	context "context"

	driver "github.com/hashicorp/consul-nia/driver"
	mock "github.com/stretchr/testify/mock"
)

// Driver is an autogenerated mock type for the Driver type
type Driver struct {
	mock.Mock
}

// ApplyTaskWork provides a mock function with given fields: taskName, ctx
func (_m *Driver) ApplyTaskWork(taskName string, ctx context.Context) error {
	ret := _m.Called(taskName, ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, context.Context) error); ok {
		r0 = rf(taskName, ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApplyWork provides a mock function with given fields: ctx
func (_m *Driver) ApplyWork(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Init provides a mock function with given fields:
func (_m *Driver) Init() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitTask provides a mock function with given fields: task, force
func (_m *Driver) InitTask(task driver.Task, force bool) error {
	ret := _m.Called(task, force)

	var r0 error
	if rf, ok := ret.Get(0).(func(driver.Task, bool) error); ok {
		r0 = rf(task, force)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitTaskWork provides a mock function with given fields: taskName, ctx
func (_m *Driver) InitTaskWork(taskName string, ctx context.Context) error {
	ret := _m.Called(taskName, ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, context.Context) error); ok {
		r0 = rf(taskName, ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitWork provides a mock function with given fields: ctx
func (_m *Driver) InitWork(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitWorker provides a mock function with given fields: task
func (_m *Driver) InitWorker(task driver.Task) error {
	ret := _m.Called(task)

	var r0 error
	if rf, ok := ret.Get(0).(func(driver.Task) error); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Version provides a mock function with given fields:
func (_m *Driver) Version() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
