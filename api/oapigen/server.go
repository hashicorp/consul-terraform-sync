// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Deletes a task by name
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter run: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
