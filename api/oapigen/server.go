// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets health status
	// (GET /v1/health)
	GetHealth(w http.ResponseWriter, r *http.Request)
	// Gets cluster status when CTS is configured with high availability
	// (GET /v1/status/cluster)
	GetClusterStatus(w http.ResponseWriter, r *http.Request)
	// Gets all tasks
	// (GET /v1/tasks)
	GetAllTasks(w http.ResponseWriter, r *http.Request)
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Marks a task for deletion
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
	// Gets a task by name
	// (GET /v1/tasks/{name})
	GetTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Gets health status
// (GET /v1/health)
func (_ Unimplemented) GetHealth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Gets cluster status when CTS is configured with high availability
// (GET /v1/status/cluster)
func (_ Unimplemented) GetClusterStatus(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Gets all tasks
// (GET /v1/tasks)
func (_ Unimplemented) GetAllTasks(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Creates a new task
// (POST /v1/tasks)
func (_ Unimplemented) CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Marks a task for deletion
// (DELETE /v1/tasks/{name})
func (_ Unimplemented) DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Gets a task by name
// (GET /v1/tasks/{name})
func (_ Unimplemented) GetTaskByName(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetClusterStatus operation middleware
func (siw *ServerInterfaceWrapper) GetClusterStatus(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClusterStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAllTasks operation middleware
func (siw *ServerInterfaceWrapper) GetAllTasks(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllTasks(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTaskByName operation middleware
func (siw *ServerInterfaceWrapper) GetTaskByName(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTaskByName(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/health", wrapper.GetHealth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/status/cluster", wrapper.GetClusterStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks", wrapper.GetAllTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks/{name}", wrapper.GetTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
