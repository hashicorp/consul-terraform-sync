// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets health status
	// (GET /v1/health)
	GetHealth(w http.ResponseWriter, r *http.Request)
	// Gets all tasks
	// (GET /v1/tasks)
	GetAllTasks(w http.ResponseWriter, r *http.Request)
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Marks a task for deletion
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
	// Gets a task by name
	// (GET /v1/tasks/{name})
	GetTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetAllTasks operation middleware
func (siw *ServerInterfaceWrapper) GetAllTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllTasks(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTaskByName operation middleware
func (siw *ServerInterfaceWrapper) GetTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/health", wrapper.GetHealth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks", wrapper.GetAllTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks/{name}", wrapper.GetTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
