name: build

on:
  push

jobs:
  get-product-version:
    runs-on: ubuntu-latest
    outputs:
      product-version: ${{ steps.get-product-version.outputs.product-version }}
    steps:
      - uses: actions/checkout@v2
      - name: get product version
        id: get-product-version
        run: |
          make version
          echo "::set-output name=product-version::$(make version)"

  build-386:
    needs: get-product-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [ linux, freebsd, windows ]
        goarch: [ "386" ]
        go: [ "1.16" ]
      fail-fast: true

    name: Go ${{ matrix.go }} ${{ matrix.goos }} ${{ matrix.goarch }} build
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      DOCKER_CLI_EXPERIMENTAL: enabled

    steps:
      - uses: actions/checkout@v2
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}
      - name: Build
        run: |
          mkdir dist out
          go build -o dist/ .
          zip -r -j out/${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip dist/
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip
          path: out/${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip

      - name: Package
        if: ${{ matrix.goos == 'linux' }}
        uses: hashicorp/package@v1
        with:
          name: ${{ github.event.repository.name }}
          description: "Consul Terraform Sync is a service-oriented tool for managing network infrastructure near real-time."
          arch: ${{ matrix.goarch }}
          version: ${{ needs.get-product-version.outputs.product-version }}
          maintainer: "HashiCorp"
          homepage: "https://github.com/hashicorp/consul-terraform-sync"
          license: "MPL-2.0"
          binary: "dist/${{ github.event.repository.name }}"
          deb_depends: "openssl"
          rpm_depends: "openssl"

      - uses: actions/upload-artifact@v2
        if: ${{ matrix.goos == 'linux' }}
        with:
          name: ${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_i386.deb
          path: out/${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_i386.deb

      - uses: actions/upload-artifact@v2
        if: ${{ matrix.goos == 'linux' }}
        with:
          name: ${{ github.event.repository.name }}-${{ needs.get-product-version.outputs.product-version }}.i386.rpm
          path: out/${{ github.event.repository.name }}-${{ needs.get-product-version.outputs.product-version }}.i386.rpm

  build-amd64:
    needs: get-product-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, freebsd, solaris, windows]
        goarch: ["amd64"]
        go: ["1.16"]
      fail-fast: true

    name: Go ${{ matrix.go }} ${{ matrix.goos }} ${{ matrix.goarch }} build

    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      DOCKER_CLI_EXPERIMENTAL: enabled

    steps:
      - uses: actions/checkout@v2

      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Build
        run: |
          mkdir dist out
          go build -o dist/
          zip -r -j out/${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip dist/

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip
          path: out/${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip

      - name: Package
        if: ${{ matrix.goos == 'linux' }}
        uses: hashicorp/package@v1
        with:
          name: ${{ github.event.repository.name }}
          description: "Consul Terraform Sync is a service-oriented tool for managing network infrastructure near real-time."
          arch: ${{ matrix.goarch }}
          version: ${{ needs.get-product-version.outputs.product-version }}
          maintainer: "HashiCorp"
          homepage: "https://github.com/hashicorp/consul-terraform-sync"
          license: "MPL-2.0"
          binary: "dist/${{ github.event.repository.name }}"
          deb_depends: "openssl"
          rpm_depends: "openssl"

      - uses: actions/upload-artifact@v2
        if: ${{ matrix.goos == 'linux' }}
        with:
          name: ${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goarch }}.deb
          path: out/${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goarch }}.deb

      - uses: actions/upload-artifact@v2
        if: ${{ matrix.goos == 'linux' }}
        with:
          name: ${{ github.event.repository.name }}-${{ needs.get-product-version.outputs.product-version }}.x86_64.rpm
          path: out/${{ github.event.repository.name }}-${{ needs.get-product-version.outputs.product-version }}.x86_64.rpm

  build-arm:
    needs: get-product-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux]
        goarch: [arm]
        go: ["1.16"]
        goarm: [5, 6]
      fail-fast: true

    name: Go ${{ matrix.go }} ${{ matrix.goos }} ${{ matrix.goarch }} ${{ matrix.goarm }} build

    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      DOCKER_CLI_EXPERIMENTAL: enabled

    steps:
      - uses: actions/checkout@v2

      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Set env NEED
        run: |
          if [[ ${{ matrix.goarm }} == '5' ]]; then
              echo "FILE_SUFFIX=armelv5" >> "$GITHUB_ENV"
          else
              echo "FILE_SUFFIX=armhfv6" >> "$GITHUB_ENV"
          fi

      - name: Build
        run: |
          mkdir dist out
          go build -o dist/
          zip -r -j out/${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ env.FILE_SUFFIX }}.zip dist/


      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ env.FILE_SUFFIX }}.zip
          path: out/${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ env.FILE_SUFFIX }}.zip


      - name: Package
        if: ${{ matrix.goos == 'linux' }}
        uses: hashicorp/package@v1
        with:
          name: ${{ github.event.repository.name }}
          description: "Consul Terraform Sync is a service-oriented tool for managing network infrastructure near real-time."
          arch: ${{ env.FILE_SUFFIX }}
          version: ${{ needs.get-product-version.outputs.product-version }}
          maintainer: "HashiCorp"
          homepage: "https://github.com/hashicorp/consul-terraform-sync"
          license: "MPL-2.0"
          binary: "dist/${{ github.event.repository.name }}"
          deb_depends: "openssl"
          rpm_depends: "openssl"

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_${{ env.FILE_SUFFIX }}.deb
          path: out/${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_${{ env.FILE_SUFFIX }}.deb

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}-${{ needs.get-product-version.outputs.product-version }}.${{ env.FILE_SUFFIX }}.rpm
          path: out/${{ github.event.repository.name }}-${{ needs.get-product-version.outputs.product-version }}.${{ env.FILE_SUFFIX }}.rpm

  build-arm64:
    needs: get-product-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux]
        goarch: [arm64]
        go: ["1.16"]
      fail-fast: true

    name: Go ${{ matrix.go }} ${{ matrix.goos }} ${{ matrix.goarch }} build

    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      DOCKER_CLI_EXPERIMENTAL: enabled

    steps:
      - uses: actions/checkout@v2

      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Build
        run: |
          mkdir dist out
          go build -o dist/
          zip -r -j out/${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip dist/
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip
          path: out/${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip

      - name: Package
        if: ${{ matrix.goos == 'linux' }}
        uses: hashicorp/package@v1
        with:
          name: ${{ github.event.repository.name }}
          description: "Consul Terraform Sync is a service-oriented tool for managing network infrastructure near real-time."
          arch: ${{ matrix.goarch }}
          version: ${{ needs.get-product-version.outputs.product-version }}
          maintainer: "HashiCorp"
          homepage: "https://github.com/hashicorp/consul-terraform-sync"
          license: "MPL-2.0"
          binary: "dist/${{ github.event.repository.name }}"
          deb_depends: "openssl"
          rpm_depends: "openssl"

      - uses: actions/upload-artifact@v2
        if: ${{ matrix.goos == 'linux' }}
        with:
          name: ${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goarch }}.deb
          path: out/${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_arm*.deb

      - uses: actions/upload-artifact@v2
        if: ${{ matrix.goos == 'linux' }}
        with:
          name: ${{ github.event.repository.name }}-${{ needs.get-product-version.outputs.product-version }}.${{ matrix.goarch }}.rpm
          path: out/${{ github.event.repository.name }}-${{ needs.get-product-version.outputs.product-version }}.*.rpm


  build-darwin:
    needs: get-product-version
    runs-on: macos-latest
    strategy:
      matrix:
        goos: [ darwin ]
        goarch: [ "amd64" ]
        go: [ "1.16" ]
      fail-fast: true

    name: Go ${{ matrix.go }} ${{ matrix.goos }} ${{ matrix.goarch }} build

    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}

    steps:
      - uses: actions/checkout@v2

      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Build
        run: |
          mkdir dist out
          go build -o dist/
          zip -r -j out/${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip dist/
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip
          path: out/${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip

  build-docker:
    needs:
      - get-product-version
      - build-arm64
      - build-386
      - build-amd64
      - build-arm
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["arm", "arm64", "386", "amd64"]
    name: Docker ${{ matrix.arch }} build

    steps:
      - name: Set env NEED
        run: |
          if [[ ${{ matrix.arch }} == 'arm' ]]; then
              echo "FILE_SUFFIX=armhfv6" >> "$GITHUB_ENV"
          else
              echo "FILE_SUFFIX=${{ matrix.arch }}" >> "$GITHUB_ENV"
          fi
      - uses: actions/checkout@v2

      # download arm/arm64/386/amd64 binaries from build jobs
      - uses: actions/download-artifact@v2
        with:
          name: ${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_linux_${{ env.FILE_SUFFIX }}.zip

      # build docker image
      - name: Docker build
        working-directory: ./.release/docker
        run: |
          docker version
          unzip -j ${GITHUB_WORKSPACE}/${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_linux_${{ env.FILE_SUFFIX }}.zip
          # arm32 bit docker images are set with --platform=linux/arm/v6
          if [ "${{ matrix.arch }}" = "arm" ]; then
            make docker ARCH=${{ matrix.arch }} GOARM_DOCKER="/v6"
          else
            make docker ARCH=${{ matrix.arch }}
          fi
      # upload image tarball
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_docker_linux_${{ matrix.arch }}.tar
          path: .release/docker/${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_docker_linux_${{ matrix.arch }}.tar
  
  
  generate_metadata:
    needs: get-product-version
    runs-on: ubuntu-latest
    name: Generate Metadata

    steps:
      - uses: actions/checkout@v2

      - name: Generate Metadata
        run: .github/scripts/generate_metadata.sh | tee metadata.json

      - uses: actions/upload-artifact@v2
        with:
          name: metadata.json
          path: metadata.json
